generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRE_SQL_CONNECTION_STRING")
}

model User {
  id               Int                 @id @default(autoincrement())
  username         String              @unique
  password         String
  email            String              @unique
  avatarUrl        String?
  createdAt        DateTime            @default(now())
  address          String?
  isBanned         Boolean             @default(false)
  isDeleted        Boolean             @default(false)
  points           Int                 @default(0)
  roleId           Int
  comments         Comment[]
  messagesReceived Message[]           @relation("ReceivedMessages")
  messagesSent     Message[]           @relation("SentMessages")
  posts            Post[]
  problems         Problem[]
  submissions      Submission[]
  role             Role                @relation(fields: [roleId], references: [id])
  solvedProblems   UserSolvedProblem[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime  @default(now())
  userId    Int
  isDeleted Boolean   @default(false)
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  postId    Int
  userId    Int
  isDeleted Boolean  @default(false)
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Problem {
  id                Int                 @id @default(autoincrement())
  title             String
  content           String
  createdAt         DateTime            @default(now())
  userId            Int
  executionTime     Float?
  memoryLimit       Int?
  points            Int?
  slug              String              @unique
  difficulty        String?
  isDeleted         Boolean             @default(false)
  user              User                @relation(fields: [userId], references: [id])
  problemCategories ProblemCategory[]
  submisions        Submission[]
  testCases         TestCase[]
  SolvedBy          UserSolvedProblem[]
  categories        Category[]          @relation("CategoryToProblem")
  contests          Contest[]           @relation("ContestToProblem")
}

model ProblemCategory {
  problemId  Int
  categoryId Int
  isDeleted  Boolean  @default(false)
  category   Category @relation(fields: [categoryId], references: [id])
  problem    Problem  @relation(fields: [problemId], references: [id])

  @@id([problemId, categoryId])
}

model Submission {
  id            Int                @id @default(autoincrement())
  code          String
  language      String
  createdAt     DateTime           @default(now())
  userId        Int
  problemId     Int
  status        String?
  executionTime Float?
  memoryUsed    Int?
  Score         Float?
  isDeleted     Boolean            @default(false)
  problem       Problem            @relation(fields: [problemId], references: [id])
  user          User               @relation(fields: [userId], references: [id])
  result        SubmissionResult[]
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   Int
  receiverId Int
  isDeleted  Boolean  @default(false)
  content    String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Contest {
  id        Int       @id @default(autoincrement())
  title     String
  createdAt DateTime  @default(now())
  beginAt   DateTime
  endAt     DateTime
  isDeleted Boolean   @default(false)
  problems  Problem[] @relation("ContestToProblem")
}

model TestCase {
  id        Int     @id @default(autoincrement())
  path      String
  problemId Int
  isDeleted Boolean @default(false)
  quantity  Int     @default(0)
  problem   Problem @relation(fields: [problemId], references: [id])
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  description       String
  problemCategories ProblemCategory[]
  problems          Problem[]         @relation("CategoryToProblem")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model SubmissionResult {
  id           Int        @id @default(autoincrement())
  submissionId Int
  result       String
  index        Int
  createdAt    DateTime   @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id])
}

model UserSolvedProblem {
  userId    Int
  problemId Int
  isDeleted Boolean @default(false)
  problem   Problem @relation(fields: [problemId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, problemId])
}
